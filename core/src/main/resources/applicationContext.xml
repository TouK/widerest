<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
        
    <!-- Shared properties between admin and site go here -->
    <bean id="blMergedDataSources" class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map>
                <entry key="jdbc/web" value-ref="webDS"/>
                <entry key="jdbc/webSecure" value-ref="webSecureDS"/>
                <entry key="jdbc/cmsStorage" value-ref="webStorageDS"/>
            </map>
        </property>
    </bean>

    <bean id="blMergedPersistenceXmlLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>classpath*:/META-INF/persistence-core.xml</value>
            </list>
        </property>
    </bean>

    <!-- Scan DemoSite Sample Payment Gateway Implementation -->
    <!--context:component-scan pl.touk.widerest.base-package="com.mycompany.sample" /-->

    <!--bean class="com.mycompany.sample.vendor.nullPaymentGateway.service.payment.NullPaymentGatewayType"/-->

    <!-- Add Sample Thymeleaf Processor to test Hosted Payment Gateway (e.g. PayPal Express Flow) -->
    <!--bean id="myNullPaymentGatewayHostedActionProcessor" class="com.mycompany.sample.vendor.nullPaymentGateway.web.processor.NullPaymentGatewayHostedActionProcessor"/>
    <bean id="mySamplePaymentProcessors" class="org.springframework.beans.factory.config.SetFactoryBean">
        <property name="sourceSet">
            <set>
                <ref bean="myNullPaymentGatewayHostedActionProcessor"/>
            </set>
        </property>
    </bean-->
    <!--bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="mySamplePaymentProcessors"/>
        <property name="targetRef" value="blDialectProcessors"/>
    </bean-->

    <!--bean id="mySampleConfigurationServices" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <ref bean="blNullPaymentGatewayConfigurationService"/>
                <ref bean="blNullPaymentGatewayHostedConfigurationService"/>
            </list>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="mySampleConfigurationServices"/>
        <property name="targetRef" value="blPaymentGatewayConfigurationServices"/>
    </bean-->
    <!-- /End DemoSite NullPaymentGateway Config -->
    <bean class="pl.touk.widerest.paypal.gateway.PayPalPaymentGatewayType"/>

    <bean name="blInventoryService" class="pl.touk.widerest.ext.InventoryServiceImpl"/>
    <bean p:order="2000" id="blCheckAddAvailabilityActivity" class="pl.touk.widerest.ext.CheckAvailabilityActivity"/>
    <bean p:order="2000" id="blCheckUpdateAvailabilityActivity" class="pl.touk.widerest.ext.CheckAvailabilityActivity"/>

    <!-- Set up custom entity overrides. These are defined in core/src/main/resources -->
    <bean id="blMergedEntityContexts" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>classpath:applicationContext-entity.xml</value>
            </list>
        </property>
    </bean>

    <!-- Delete this bean to enable caching - leaving it on for development is recommended -->
    <!-- as it will allow changes made in the admin or directly on the database to be reflected -->
    <!-- immediately. However, caching is obviously beneficial in production. -->
    <bean id="blMergedCacheConfigLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>classpath:bl-override-ehcache.xml</value>
            </list>
        </property>
    </bean>

    <!-- Delete this section to disable the embedded solr search service. Although this will result in a smaller -->
    <!-- application footprint, it will default the search service to use the database implementation, which  -->
    <!-- is slower and less full-featured. Broadleaf suggests maintaining this solr implementation in the vast -->
    <!-- majority of cases. -->
    <bean id="solrEmbedded" class="java.lang.String">
        <constructor-arg value="solrhome"/>
    </bean>

    <!--A simple quartz jobs for enabling cart and customer purge functionality. Uncomment the following quartz configurations-->
    <!--to activate this functionality (Also, uncomment the 'purgeCartTrigger' and 'purgeCustomerTrigger' configured under SchedulerFactoryBean.-->
    <!--Note, you can edit the configuration to customize the functionality. Take a look-->
    <!--at PurgeCartVariableNames and PurgeCustomerVariableNames for a list of available params and ResourcePurgeService for additional information. Also,-->
    <!--for custom resource retrieval beyond the scope of the existing implementation, ResourcePurgeServiceImpl can be subclassed-->
    <!--to provide custom resource retrieval functionality. Please see Quartz documentation for more advanced configuration,-->
    <!--such as clustering.-->

    <!--<bean id="purgeCartConfig" class="org.springframework.beans.factory.config.MapFactoryBean">-->
    <!--<property name="sourceMap">-->
    <!--<map>-->
    <!--<entry key="SECONDS_OLD" value="2592000"/>-->
    <!--<entry key="STATUS" value="IN_PROCESS"/>-->
    <!--</map>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCartJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
    <!--<property name="targetObject" ref="blResourcePurgeService" />-->
    <!--<property name="targetMethod" value="purgeCarts" />-->
    <!--<property name="arguments">-->
    <!--<list>-->
    <!--<ref bean="purgeCartConfig"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCartTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
    <!--<property name="jobDetail" ref="purgeCartJobDetail" />-->
    <!--<property name="startDelay" value="30000" />-->
    <!--<property name="repeatInterval" value="86400000" />-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerConfig" class="org.springframework.beans.factory.config.MapFactoryBean">-->
    <!--<property name="sourceMap">-->
    <!--<map>-->
    <!--<entry key="SECONDS_OLD" value="2592000"/>-->
    <!--<entry key="IS_REGISTERED" value="false"/>-->
    <!--</map>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
    <!--<property name="targetObject" ref="blResourcePurgeService" />-->
    <!--<property name="targetMethod" value="purgeCustomers" />-->
    <!--<property name="arguments">-->
    <!--<list>-->
    <!--<ref bean="purgeCustomerConfig"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
    <!--<property name="jobDetail" ref="purgeCustomerJobDetail" />-->
    <!--<property name="startDelay" value="30000" />-->
    <!--<property name="repeatInterval" value="86400000" />-->
    <!--</bean>-->

    <!-- If you want to use a standalone solr server for at least one environment, uncomment the following -->
    <!-- three beans and set solr.source.primary, solr.source.reindex, and solr.source.admin in the property file -->
    <!-- to be solrServer, solrReindexServer, and solrAdminServer, respectively: -->
    <!-- solr.souce.primary=solrServer-->
    <!-- solr.souce.reindex=solrReindexServer-->
    <!-- solr.souce.admin=solrAdminServer-->
    <!-- Then, ensure that the three beans that you just uncommented, below, have their constructor arguments -->
    <!-- pointing to the correct URLs of the stand alone server(s) -->
    <!-- NOTE this assumes you are using Solr 4.4. -->
    <!-- solr.url.admin should point to the ROOT of the server, for example: http://localhost:8983/solr. -->
    <!-- solr.url.reindex should point to the reindex core, for example: http://localhost:8983/solr/reindex. -->
    <!-- solr.url.primary should point to the primary core, for example, http://localhost:8983/solr/primary.  -->
    <!-- In version 4.4 and higher of Solr, there is no need to configure the cores or defaultCoreName elements -->
    <!-- in solr.xml, as Solr cores are auto discoverable as of 4.4 (see Solr documentation).-->
    <!-- So, for Solr 4.4, in stand-alone mode, you should configure the following 3 HttpSolrServer configurations: -->
    <!--     <bean id="solrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer"> -->
    <!--         <constructor-arg value="${solr.url.primary}"/> -->
    <!--     </bean> -->
    <!--     <bean id="solrReindexServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer"> -->
    <!--         <constructor-arg value="${solr.url.reindex}"/> -->
    <!--     </bean> -->
    <!--     <bean id="solrAdminServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer"> -->
    <!--         <constructor-arg value="${solr.url.admin}"/> -->
    <!--     </bean> -->
    <bean id="blSearchService" class="org.broadleafcommerce.core.search.service.solr.SolrSearchServiceImpl">
        <constructor-arg name="solrServer" ref="${solr.source.primary}" />
        <constructor-arg name="reindexServer" ref="${solr.source.reindex}" />
        <constructor-arg name="adminServer" ref="${solr.source.admin}" />
    </bean>
    <bean id="rebuildIndexJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="blSearchService" />
        <property name="targetMethod" value="rebuildIndex" />
    </bean>
    <bean id="rebuildIndexTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="rebuildIndexJobDetail" />
        <property name="startDelay" value="${solr.index.start.delay}" />
        <property name="repeatInterval" value="${solr.index.repeat.interval}" />
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="rebuildIndexTrigger" />
                <!--<ref bean="purgeCartTrigger" />-->
                <!--<ref bean="purgeCustomerTrigger" />-->
            </list>
        </property>
    </bean>

    <!--  Broaldeaf Commerce comes with an Image Server that allows you to manipulate images.   For example, the
          demo includes a high resolution image for each product that is reduced in size for browsing operations -->
    <bean id="blStaticMapNamedOperationComponent" class="org.broadleafcommerce.cms.file.service.operation.StaticMapNamedOperationComponent">
        <property name="namedOperations">
            <map>
                <entry key="browse">
                    <map>
                        <entry key="resize-width-amount" value="400"/>
                        <entry key="resize-height-amount" value="400"/>
                        <entry key="resize-high-quality" value="false"/>
                        <entry key="resize-maintain-aspect-ratio" value="true"/>
                        <entry key="resize-reduce-only" value="true"/>
                    </map>
                </entry>
                <entry key="thumbnail">
                    <map>
                        <entry key="resize-width-amount" value="60"/>
                        <entry key="resize-height-amount" value="60"/>
                        <entry key="resize-high-quality" value="false"/>
                        <entry key="resize-maintain-aspect-ratio" value="true"/>
                        <entry key="resize-reduce-only" value="true"/>
                    </map>
                </entry>
            </map>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="blTransactionManager"/>

</beans>
